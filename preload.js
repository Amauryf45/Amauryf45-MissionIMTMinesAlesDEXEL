const { contextBridge, ipcRenderer} = require('electron');

contextBridge.exposeInMainWorld('api',{
    title:'DEXEL - Outil de gestion du personnel',
    createNote: (data)=> ipcRenderer.invoke('create-file',data),
    checkEmployee: (filter)=> ipcRenderer.invoke('employeData',filter),
    openPersonnePopUp: (data)=> ipcRenderer.invoke('openPersonnePopUp',data),
    updatePersonne: (personneData) => ipcRenderer.invoke('updatePersonne',personneData),
    removePersonne: (personneID) => ipcRenderer.invoke('removePersonne',personneID),
    getPersonneInfo: (personneID)=> ipcRenderer.invoke('getPersonneInfo',personneID),
    getFormationsPersonne: (personneID)=> ipcRenderer.invoke('getFormationsPersonne',personneID),
    getFormationsPersonneByID: (ID)=> ipcRenderer.invoke('getFormationsPersonneByID',ID),
    getFormationID: (posteID,posteType)=> ipcRenderer.invoke('getFormationID',{posteID,posteType}),
    getFormationInfo: (formationID)=> ipcRenderer.invoke('getFormationInfo',formationID),
    updateFormationCompOrder: (formationID,index,upOrDown)=> ipcRenderer.invoke('updateFormationCompOrder',{formationID,index,upOrDown}),
    addCompToForm: (compID, formationID)=> ipcRenderer.invoke('addCompToForm',{compID,formationID}),
    createFormation : (posteID,posteType)=>ipcRenderer.invoke("createFormation",{posteID,posteType}),
    openPostePopUp: (data)=> ipcRenderer.invoke('openPostePopUp',data),
    removePoste: (posteID) => ipcRenderer.invoke('removePoste',posteID),
    updatePoste: (data) => ipcRenderer.invoke('updatePoste',data),
    getAllPostes : (filter)=> ipcRenderer.invoke("getAllPostes",filter),
    getPosteInfo: (posteID)=> ipcRenderer.invoke('getPosteInfo',posteID),
    getFormationsPoste: (posteID)=> ipcRenderer.invoke('getFormationsPoste',posteID),
    getAllCompetences : ()=> ipcRenderer.invoke("getAllCompetences"),
    getCompetenceInfo: (competenceID)=> ipcRenderer.invoke('getCompetenceInfo',competenceID),
    createCompetence : (nomComp,unique)=>ipcRenderer.invoke("createCompetence",{nomComp,unique}),
    updatePersonneCompetence: (compInfo)=> ipcRenderer.invoke('updatePersonneCompetence',compInfo),
    getPersonneCompetence: (personneID, posteID, competenceID)=> ipcRenderer.invoke('getPersonneCompetence',{personneID, posteID, competenceID}),
    getPersonneFormationLastIndex : ()=> ipcRenderer.invoke("getPersonneFormationLastIndex"),
    updateValidFormation: (value,personneID,competenceID)=> ipcRenderer.invoke("updateValidFormation",{value,personneID,competenceID}),
    updateFormationPersonnes: (persFormID,newValue) => ipcRenderer.invoke('updateFormationPersonnes',{persFormID,newValue}),
    removeFormationPersonne: (formationID,personneID) => ipcRenderer.invoke('removeFormationPersonne',{formationID,personneID}),
    selectImage: (callback) => ipcRenderer.on('selected-image', callback),
    saveImage: (imagePath,ID_personne) => ipcRenderer.invoke('save-image', {imagePath,ID_personne}),
    closeCurrentWindow : ()=>ipcRenderer.invoke('closeCurrentWindow'),
    checkFileExists: (filePath) => ipcRenderer.invoke('check-file-exists', filePath)
})